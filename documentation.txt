# Task 2 - Python Web API Challenge: Expense Data Service

# API:
API is a Django core app that is build with the aim to serve the summaries and analyses generated by processing expenses.csv in a JSON format. It will allow any application, be it a web frontend or mobile app, to fetch and utilize the processed data.
It was developed using Django Framework. 


It has following API Endpoints:
- GET `/expense_by_type`: Returns the total expense for each expense type in JSON format.
- GET `/monthly_expenses`: Returns the monthly total expenses in JSON format.
- GET `/detailed_breakdown`: Returns a structured JSON containing the breakdown of expenses by expense_type, further subdivided by payment_method.

# How to set up and serve the API

* Navigate to the desktop or Choose the directory on your computer where you want to where you want setup this application. 
* Right-click within the selected directory and choose "Git Bash here" to open the Git Bash terminal here. 
* In the Git Bash terminal, clone the project from GitHub using the following command.

'git clone git@github.com:Kritimandal/task-expense-analysis.git'

*Once the applicatin is cloned, open the folder 'task-expense-analysis'. Next, right-click on the mounse and choose "Open in Terminal". 
* Enter the following command in the cmd:

  > cd API
  > .venv\Scripts\activate
  > python manage.py runserver

* The server will start at http://127.0.0.1:8000/

Note: Don't close the command prompt.

 ** To view the total expense for each expense type in JSON format, copy paste the 'http://127.0.0.1.8000/expense_by_type/' in the browser.
 ** To view the monthly total expenses in JSON format, copy paste the 'http://127.0.0.1.8000/monthly_expenses/' in the browser.
 ** To view the a structured JSON containing the breakdown of expenses by expense_type, further subdivided by payment_method, copy paste the 'http://127.0.0.1.8000/detailed_breakdown/' in the browser.

*To stop the server, enter ctl+ C on the cmd.

# Assumptions:

While developing this application, I've made few assumptions. They are as follows:
* If the amount is missing in the dataset then, the default value of '0.0' is assumed for that particular record.
* If the entity_date is missing in the dataset then, the default date is assumed to be '2023-1-1' for that specific record.
* If the Entity_type is missing then the default value is assumed to be 'Groceries' for that record.

# Other relevant Informatin:

* I've used virtualenv with Django for managing project-specific dependencies and keeping the project isolated from other Python projects on the system. 





